{"version":3,"sources":["src\\utils\\warning.js"],"names":["__DEV__","process","env","NODE_ENV","warning","condition","format","args","len","arguments","length","Array","key","undefined","Error","test","argIndex","message","replace","console","error","x","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;;AAEA;;;;;;;AAOA,IAAIA,UAAUC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC;;AAEA,IAAIC,UAAU,mBAAW,CAAE,CAA3B;;AAEA,IAAIJ,OAAJ,EAAa;AACXI,YAAU,iBAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAC1C,QAAIC,MAAMC,UAAUC,MAApB;AACAH,WAAO,IAAII,KAAJ,CAAUH,MAAM,CAAN,GAAUA,MAAM,CAAhB,GAAoB,CAA9B,CAAP;AACA,SAAK,IAAII,MAAM,CAAf,EAAkBA,MAAMJ,GAAxB,EAA6BI,KAA7B,EAAoC;AAClCL,WAAKK,MAAM,CAAX,IAAgBH,UAAUG,GAAV,CAAhB;AACD;AACD,QAAIN,WAAWO,SAAf,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CACJ,8DACA,kBAFI,CAAN;AAID;;AAED,QAAIR,OAAOI,MAAP,GAAgB,EAAhB,IAAuB,UAAD,CAAaK,IAAb,CAAkBT,MAAlB,CAA1B,EAAqD;AACnD,YAAM,IAAIQ,KAAJ,CACJ,iEACA,uDADA,GAC0DR,MAFtD,CAAN;AAID;;AAED,QAAI,CAACD,SAAL,EAAgB;AACd,UAAIW,WAAW,CAAf;AACA,UAAIC,UAAU,cACZX,OAAOY,OAAP,CAAe,KAAf,EAAsB,YAAW;AAC/B,eAAOX,KAAKS,UAAL,CAAP;AACD,OAFD,CADF;AAIA,UAAI,OAAOG,OAAP,KAAmB,WAAvB,EAAoC;AAClCA,gBAAQC,KAAR,CAAcH,OAAd;AACD;AACD,UAAI;AACF;AACA;AACA,cAAM,IAAIH,KAAJ,CAAUG,OAAV,CAAN;AACD,OAJD,CAIE,OAAMI,CAAN,EAAS,CAAE;AACd;AACF,GAnCD;AAoCD;;AAEDC,OAAOC,OAAP,GAAiBnB,OAAjB","file":"warning.js","sourceRoot":"E:/New/tinper/react-comp/form-control","sourcesContent":["/**\r\n * Copyright 2014-2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Similar to invariant but only logs a warning if the condition is not met.\r\n * This can be used to log issues in development environments in critical\r\n * paths. Removing the logging code for production environments will keep the\r\n * same logic and follow the same code paths.\r\n */\r\n\r\nvar __DEV__ = process.env.NODE_ENV !== 'production';\r\n\r\nvar warning = function() {};\r\n\r\nif (__DEV__) {\r\n  warning = function(condition, format, args) {\r\n    var len = arguments.length;\r\n    args = new Array(len > 2 ? len - 2 : 0);\r\n    for (var key = 2; key < len; key++) {\r\n      args[key - 2] = arguments[key];\r\n    }\r\n    if (format === undefined) {\r\n      throw new Error(\r\n        '`warning(condition, format, ...args)` requires a warning ' +\r\n        'message argument'\r\n      );\r\n    }\r\n\r\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\r\n      throw new Error(\r\n        'The warning format should be able to uniquely identify this ' +\r\n        'warning. Please, use a more descriptive format than: ' + format\r\n      );\r\n    }\r\n\r\n    if (!condition) {\r\n      var argIndex = 0;\r\n      var message = 'Warning: ' +\r\n        format.replace(/%s/g, function() {\r\n          return args[argIndex++];\r\n        });\r\n      if (typeof console !== 'undefined') {\r\n        console.error(message);\r\n      }\r\n      try {\r\n        // This error was thrown as a convenience so that you can use this stack\r\n        // to find the callsite that caused this warning to fire.\r\n        throw new Error(message);\r\n      } catch(x) {}\r\n    }\r\n  };\r\n}\r\n\r\nmodule.exports = warning;\r\n"]}